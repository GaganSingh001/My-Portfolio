library("curl")
library("httr")
library("rjson")
library(purrr)
library(stringr)
require(plyr)
library(readxl)
packageVersion("readxl")

path <- Sys.getenv("HOME")

api <- # <your api>

#### data needs to be all strings

predict <- ### path to new data
final <- ### path to existing dataset

ds <- as.vector(predict)
ds <- unname(ds)
ds <- ds %>% purrr::transpose()


######### predict
requestFailed = function(response) {
    return (response$status_code >= 400)
}

printHttpResult = function(response, result) {
    if (requestFailed(response)) {
        print(paste("The request failed with status code:", response$status_code, sep=" "))
    
        # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
        print(response$headers)
    }
    
    print("Result:") 
    print(fromJSON(result))  
}

req = list(
    
    Inputs = list( 
        "input1" = list(

### Here you pass in all the attributes as defined in your model. Has to be exactly the same and all attributes need to be strings

            "ColumnNames" = list("Value1", "Value2", "Value3"),
            "Values" = ds
        )
    ),
    GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')

response = POST(url= "https://ussouthcentral.services.azureml.net/workspaces/abddcdcde8ce4b61a476ffd630cd6394/services/983b282f70c14cf9983c998116c3852c/execute?api-version=2.0&details=true",
        add_headers("Content-Type" = "application/json", "Authorization" = authz_hdr),
        body = body)


http_status(response)
response1 <- response

##### Format results

json <- httr::content(response1, as = "text")
df <- fromJSON(json)
df <- as.data.frame(df)
Scored.Labels <- df$Results.Quantile.Range..10....90......CLV.Values

#### Combine with existing dataset

final <- cbind(predict,Scored.Labels) 
final <- rbind.fill(result,final)

dataset <- unique(final)


 
